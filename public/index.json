[
{
	"uri": "/",
	"title": "AWS Modernization with Harness",
	"tags": [],
	"description": "",
	"content": " AWS Modernization Workshop with Harness Welcome Welcome to the AWS Modernization with Harness workshop! In this workshop, you will gain hands-on experience using Harness to deploy an application to AWS EKS. Harness is a self-service CI/CD platform that allows engineers and DevOps team to build, test, deploy, and verify software, on-demand. This is a hands-on workshop where you will learn how to leverage Harness for easier deployments of your application.\n"
},
{
	"uri": "/010_introduction.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Learning Objectives Today we are going to learn the following topics:\n How to deploy a sample EKS application to your AWS environment using Harness How to configure Prometheus to monitor your EKS application How to use Harness to deploy your application using a Canary deployment strategy How Harness can use Prometheus to validate and remediate your EKS application  Workshop Structure This workshop is broken into the sections list below. Estimated time for completing the workshop is 1.5-2.5 hours.\n Prerequisites (5 minutes) Provision a Cloud9 instance and validate Setup (15 minutes) Install necessary tooling to complete the lab and wire up Harness to EKS Workshop Exercises (30-120 minutes)  Deploy and Configure Metric Server and Promethus (~15 minutes) Create and Configure Sample Application in Harness (~15 minutes) Deploy Canary and Verify (~30 minutes)\n   "
},
{
	"uri": "/020_prerequisites/aws_setup.html",
	"title": "AWS Setup",
	"tags": [],
	"description": "",
	"content": " Workshop Prerequisites There are a few prerequisite tasks you must perform before getting started on this workshop. These are:\n Access an AWS account Launch Cloud9 IDE Workspace Sign-up for a Harness Trial account An Amazon EKS Cluster with the ability to deploy  We will step through each of these in turn.\nAccess an AWS account To start the workshop, follow one of the following depending on whether you are\u0026hellip;\n Attending an AWS hosted event, or Running the workshop on your own  Once you have completed with either setup, continue with Launch a Cloud9 IDE Workspace\nIn this section, we\u0026rsquo;ll cover the following topics:\n 1. Attending an AWS hosted event   2. Running the workshop on your own   3.1 Create a Workspace   3.2 Create IAM role   3.3 Attach IAM Role   3.4 Configure workshop specific requirements   "
},
{
	"uri": "/020_prerequisites/harness_setup.html",
	"title": "Harness Setup",
	"tags": [],
	"description": "",
	"content": " Harness Setup Once you have signed up for an account with Harness, you can log into Harness by heading to app.harness.io and logging in with your credentials. Harness works on a CD Abstraction Model which will be needed to be filled out. The first step will be to install the Harness Delegate into your EKS Cluster.\nIn this section, we\u0026rsquo;ll cover the following topics:\n 4.1 Delegate Configuration   4.2 Connecting to EKS   "
},
{
	"uri": "/020_prerequisites.html",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": " Getting Started Setup Process In order to run through this workshop, there will be 3 setup phases, please set up in this order:\n AWS Setup - instructions to configure your AWS account, whether you\u0026rsquo;re doing this lab by yourself or at an AWS/Harness Workshop. Harness Setup - instructions to set up your Harness account to allow integration with sample workloads.  "
},
{
	"uri": "/030_automated_canary/canary-lab.html",
	"title": "Automated Canary",
	"tags": [],
	"description": "",
	"content": " Automated Canary A major drawback to a Canary deployment is how complex it can be because manual verification or testing can take time and the required monitoring may involve additional research. With Harness Canary deployments become just as easy to implement as a traditional rolling deployment. Developers can now choose this release strategy that is the lowest risk-prone and cheapest.\nWhat you will learn After the completion of this workshop you will be able to:\n Explain and implement a canary deployment with Harness Create a successful deployment pipeline Roll back from a broken deployment  In this section, we\u0026rsquo;ll cover the following topics:\n 5.1 Why Canary   5.2 Important Components   "
},
{
	"uri": "/020_prerequisites/aws_setup/21_aws_event_setup.html",
	"title": "1. Attending an AWS hosted event",
	"tags": [],
	"description": "",
	"content": " Attending an AWS hosted event To complete this workshop, you will be provided with an AWS account via the AWS Event Engine service. A team hash will be provided to you by event staff.\nIf you are currently logged in to an AWS Account, you can logout using this link\n Create AWS Account 1 . Connect to the portal by clicking the button or browsing to https://dashboard.eventengine.run/. The following screen shows up. Enter the provided hash in the text box. The button on the bottom right corner changes to Accept Terms \u0026amp; Login. Click on that button to continue.\nLeave the Event Engine tab open (A new tab will be used for the next step)\n 2 . Choose AWS Console, then Open AWS Console.\n3 . Use a single region for the duration of this workshop. This workshop supports the following regions:\n us-east-1 (US East - N.Virginia)  Please select US East (N.Virginia) in the top right corner.\nThis account will expire at the end of the workshop and all the resources created will be automatically de-provisioned. You will not be able to access this account after today.\n "
},
{
	"uri": "/030_automated_canary/lab-setup.html",
	"title": "Lab Setup",
	"tags": [],
	"description": "",
	"content": " Lab Setup Within this Automated Canary Lab you will need to define the sample application within Harness. In Harness an Application contains all of the building blocks you will use to plug-and-play your deployment.\nIn this section, we\u0026rsquo;ll cover the following topics:\n 6.1 Fork Workshop Repo   6.2 Create Harness Application   6.3 Create Harness Environment   "
},
{
	"uri": "/020_prerequisites/aws_setup/22_aws_setup_your_own.html",
	"title": "2. Running the workshop on your own",
	"tags": [],
	"description": "",
	"content": " Running the workshop on your own Only complete this section if you are running the workshop on your own. If you are at an AWS hosted event (such as re:Invent, Kubecon, Immersion Day, etc), go to Start the workshop at an AWS event.\n  Your account must have the ability to create new IAM roles and scope other IAM permissions.\n You are responsible for the cost of the AWS services used while running this workshop in your AWS account.\n  If you don\u0026rsquo;t already have an AWS account with Administrator access: create one now by clicking here\n Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop\n Enter the user details:  Attach the AdministratorAccess IAM Policy:  Click to create the new user:  Take note of the login URL and save:   "
},
{
	"uri": "/030_automated_canary/verification_setup.html",
	"title": "Verification Setup",
	"tags": [],
	"description": "",
	"content": " Verification Configuration In this step will be deploying the components necessary to collect and report on the metrics of our sample application used in this lab. The tools we\u0026rsquo;ll be using include:\n Kubernetes Metrics Server Prometheus  Kubernetes Metrics Server Kubernetes Metrics Server is an aggregator of resource usage data in your cluster, and it is not deployed by default in Amazon EKS clusters\nPrometheus Prometheus is an open-source systems monitoring and alerting toolkit. Many companies and organizations have adopted Prometheus, and the project has a very active developer and user community. It is now a standalone open source project and maintained independently of any company. Prometheus joined the Cloud Native Computing Foundation in 2016.\nBoth tools are free of cost to use, however will use resources in your clusters which in turn can have a cost. While cost is not a factor for this AWS Workshop, please make sure to consider this when implementing these tools in your own clusters.\n "
},
{
	"uri": "/020_prerequisites/aws_setup/23_start_cloud9workspace.html",
	"title": "3.1 Create a Workspace",
	"tags": [],
	"description": "",
	"content": " Create a Workspace AWS Cloud9 is a cloud-based integrated development environment (IDE) that Let’s you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes prepackaged with essential tools for popular programming languages, including JavaScript, Python, PHP, and more, so you don’t need to install files or configure your laptop for this workshop.\nWe will use Amazon Cloud9 to access our AWS account via the AWS CLI in this Workshop. There are a few steps to complete to set this up\n Create a new Cloud9 IDE environment Create an IAM role for your workspace Attach the IAM role to your workspace Configure workshop specific requirements  Create a new Cloud9 IDE environment 1 . Within the AWS console, use the region drop list to select us-east-1 (N. Virginia). This will ensure the workshop script provisions the resources in this same region..\n2 . Navigate to the cloud9 console or just search for it under the AWS console services menu.\n3 . Click the Create environment button\n4 . For the name use harness-workshop, then click Next step\n5 . Select the default instance type t3.medium\n6 . Leave all the other settings as default and click Next step followed by Create environment\nThis will take about 1-2 minutes to provision\n Configure Cloud9 IDE environment When the environment comes up, customize the environment by:\n1 . Close the welcome page tab\n2 . Close the lower work area tab\n3 . Open a new terminal tab in the main work area.\n4 . Hide the left hand environment explorer by clicking on the left side environment tab.\nIf you don\u0026rsquo;t like this dark theme, you can change it from the View / Themes Cloud9 workspace menu.\n Cloud9 requires third-party-cookies. You can whitelist the specific domains. You are having issues with this, Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.\n "
},
{
	"uri": "/030_automated_canary/lab-working.html",
	"title": "Automating Canary",
	"tags": [],
	"description": "",
	"content": " Automating Canary With the Prometheus and Infrastructure items out of the way, time to focus on deploying an application and automating your Canary.\nIn this section, we\u0026rsquo;ll cover the following topics:\n 8.1 Canary Application   8.2 Automated Canary   8.3 Deploy your Canary   "
},
{
	"uri": "/020_prerequisites/aws_setup/25_create_iam_role.html",
	"title": "3.2 Create IAM role",
	"tags": [],
	"description": "",
	"content": " Create an IAM role for your workspace Starting from here, when you see command to be entered such as below, you will enter these commands into Cloud9 IDE. You can use the Copy to clipboard feature (right hand upper corner) to simply copy and paste into Cloud9. In order to paste, you can use Ctrl + V for Windows or Command + V for Mac.\n  Follow this deep link to create an IAM role with Administrator access. Confirm that AWS service and EC2 are selected, then click Next: Permissions to view permissions. Confirm that AdministratorAccess is checked, then click Next: Tags, then Next: Review to review. Enter Harness-Workshop-Admin for the Role name, and select Create role   "
},
{
	"uri": "/030_automated_canary/canary-lab/51_why_canary.html",
	"title": "5.1 Why Canary",
	"tags": [],
	"description": "",
	"content": " Why a Canary Deployment in EKS? Harness and AWS are presenting this workshop to demonstrate how easy it is to quickly and reliably create a canary deployment. Through the course of this workshop, you will follow our instructor and use your Harness and AWS accounts to dive into the features of Harness and see how it revolutionizes the CICD world. There is no prior experience necessary as we will showcase how easy our platform is to use. You will learn how to use Harness to build out a pipeline and deploy applications without the need for manual scripts.\nYou’ll have the opportunity to:\n Set up and Harness Delegate and add an EKS Cluster Deploy an instance of Prometheus Create a successful deployment in Harness using a pipeline and prometheus to monitor the application Learn how Harness makes the deployment process easier Join the on demand Q\u0026amp;A with your Harness and AWS peers  "
},
{
	"uri": "/030_automated_canary/lab-setup/61_fork_repo.html",
	"title": "6.1 Fork Workshop Repo",
	"tags": [],
	"description": "",
	"content": " Fork and Add Workshop GitHub Repository to Harness Fork this GitHub Repository into your own account. When referring to the git configuration YAMLs, please refer to your Forked repository. While logged into GitHub, visit https://github.com/ravilach/harness-canary-workshop and click Fork.\nAdding your newly forked repository will allow for workshop assets to be used in Harness.\nSetup -\u0026gt; Connectors -\u0026gt; Source Repo Providers + Add Source Repo Provider\n Name: AWS Workshop URL: https://github.com/ravilach/harness-canary-workshop (your Forked address) Username: Your User Name Password/Secret: Click Pencil to add your token/pw as a Harness Secret  Click Submit and the Repository is added.\n"
},
{
	"uri": "/030_automated_canary/lab-working/81_canary_application.html",
	"title": "8.1 Canary Application",
	"tags": [],
	"description": "",
	"content": " Define Sample Application Similar to deploying Prometheus, create a new Harness Service.\nSetup -\u0026gt; AWS Canary -\u0026gt; Services + Add Service\n Name: Sample App Deployment Type: Kubernetes  Hit Submit. Now can add an artifact Source in the Service Overview Section.\n Source Server: Harness Docker Hub [public Docker Hub] Docker Image Name: harness/cv-demo  Once you hit Submit, before importing the YAMLs in, one modification is needed.\nIn the Forked Sample Application Folder GitHub, make modification to the sample_application/values.yaml. The change needed is to configure Prometheus which you installed as an Allowed Origin.\nALLOWED_ORIGINS: http://_elb_address:8080/\ne.g http://a8241cbf8317f4c1ab5507fbce9d576c-671821569.us-east-2.elb.amazonaws.com:8080/\nCommit the Change to your Fork\nAfter the Commit, Back in the Sample App, Link to Remote Manifests.\nSetup -\u0026gt; AWS Canary Lab -\u0026gt; Services -\u0026gt; Sample App\nThen enter the Remote Manifest Details\n Manifest Format: Kubernetes Resource Source Repository: AWS Workshop Branch:main File/Folder: sample_application  Click Submit and you are ready to configure the canary.\n"
},
{
	"uri": "/010_introduction/10_foreword.html",
	"title": "Foreword",
	"tags": [],
	"description": "",
	"content": " How did we get here? It is 2am on a Saturday morning, your dinner is cold because you have been on a bridge call with the Operations and Engineering teams (now jointly called DevOps) since 7pm trying to roll back the changes applied in the latest update. There are a number of items that need to be rolled back to get to the previously working state but because there is no clear understanding of all the changes that occurred, no one is comfortable rolling back and now you are waiting on a new build to roll forward.\nThis could all have been avoided if your initial suggestion about using a Canary release strategy were adopted, but no one was willing to commit the resources needed to write the Jenkins code to manage a Canary release. So as you try to listen to a circularly mind-numbing conversation on the bridge your mind drifts in to visions of Canaries spinning above your head\u0026hellip;\n"
},
{
	"uri": "/020_prerequisites/aws_setup/26_attach_iam_role.html",
	"title": "3.3 Attach IAM Role",
	"tags": [],
	"description": "",
	"content": " Attach the IAM role to your Workspace  Follow this deep link to find your Cloud9 EC2 instance\n Select the instance, then choose Actions / Security / Modify IAM role\n Choose Harness-Workshop-Admin from the IAM Role drop down, and select Save\n  "
},
{
	"uri": "/010_introduction/12_problem_to_solve.html",
	"title": "Deployments without worry",
	"tags": [],
	"description": "",
	"content": " Deploy without worry Deployments with Kubernetes? Kubernetes (k8s) is a container orchestration platform allowing organizations to scale their services and workloads quickly. If you are working with containers or microservices, k8s may be a great use case for you. Kubenetes deployments are container image deployments which target k8s-based environments.\nAmazon has released a managed k8s service called Elastic Kubernetes Service (EKS). Amazon EKS helps you provide highly-available and secure clusters and automates key tasks such as patching, node provisioning, and updates. While AWS provides the platform on which to run your containerize applications deploying them in a scalable, repeatable and reliable way is where Harness comes in.\nHow does Harness help with EKS deployments? Harness has first-class support for Kubernetes Resources. Harness can create scaffolding around Kubernetes Resources removing complexities around crafting your own resource definitions that are purpose made for deployments. Harness can offer granular deployment lifecycle support around different Kubernetes Resources supporting canary and blue/green deployments inside Kubernetes.\nWhy is Canary deployment tricky with EKS deployments? Canary Deployments are a progressive delivery pattern for rolling out releases to a subset of users. Canary Deployments can be complex because of the multiple phases and the judgment call of when to promote or rollback a canary. The Harness Platform has smart verification taking away the manual toil in verification and enables seamless Canary Deployments.\n"
},
{
	"uri": "/020_prerequisites/aws_setup/27_config_workshop_req.html",
	"title": "3.4 Configure workshop specific requirements",
	"tags": [],
	"description": "",
	"content": " Configure workspace for Harness Workshop Cloud9 normally manages IAM credentials dynamically. This isn\u0026rsquo;t currently compatible with the EKS IAM authentication, so we will disable it and rely on the IAM role instead.\n  Return to your workspace and click the gear icon (in top right corner), or click to open a new tab and choose \u0026ldquo;Open Preferences\u0026rdquo;\n Select AWS SETTINGS and turn off AWS managed temporary credentials\n Close the Preferences tab\n   Copy and run (paste with Ctrl+P) the commands below.  Before running it, review what it does by reading through the comments.\n# Update awscli sudo pip install --upgrade awscli \u0026amp;\u0026amp; hash -r # Install jq command-line tool for parsing JSON, and bash-completion sudo yum -y install jq gettext bash-completion moreutils # Install yq for yaml processing echo \u0026#39;yq() { docker run --rm -i -v \u0026#34;${PWD}\u0026#34;:/workdir mikefarah/yq yq \u0026#34;$@\u0026#34; }\u0026#39; | tee -a ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc # Verify the binaries are in the path and executable for command in jq aws do which $command \u0026amp;\u0026gt;/dev/null \u0026amp;\u0026amp; echo \u0026#34;$commandin path\u0026#34; || echo \u0026#34;$commandNOT FOUND\u0026#34; done # Remove existing credentials file. rm -vf ${HOME}/.aws/credentials # Set the ACCOUNT_ID and the region to work with our desired region export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r \u0026#39;.region\u0026#39;) test -n \u0026#34;$AWS_REGION\u0026#34; \u0026amp;\u0026amp; echo AWS_REGION is \u0026#34;$AWS_REGION\u0026#34; || echo AWS_REGION is not set # Configure .bash_profile export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) echo \u0026#34;export ACCOUNT_ID=${ACCOUNT_ID}\u0026#34; | tee -a ~/.bash_profile echo \u0026#34;export AWS_REGION=${AWS_REGION}\u0026#34; | tee -a ~/.bash_profile aws configure set default.region ${AWS_REGION} aws configure get default.region # Validate that our IAM role is valid. aws sts get-caller-identity --query Arn | grep Harness-Workshop-Admin -q \u0026amp;\u0026amp; echo \u0026#34;IAM role valid\u0026#34; || echo \u0026#34;IAM role NOT valid\u0026#34; If the IAM role is not valid, DO NOT PROCEED. Go back and confirm the steps on this page.\n "
},
{
	"uri": "/010_introduction/14_harness.html",
	"title": "What is Harness?",
	"tags": [],
	"description": "",
	"content": " What is Harness? Harness is the industry’s first Continuous Delivery-as-a-Service platform that enables software changes of all types to reach production environments in a safe, quick and sustainable way. Harness helps accelerate cloud adoption and cloud migration activities while also enabling advanced deployment patterns and developer self-service. Harness simplifies the software delivery process, abstracting away the complexities of new technologies, making it easy for customers to automate the CI/CD process. Machine learning is leveraged to automatically verify every deployment and initiates rollbacks if needed. "
},
{
	"uri": "/030_automated_canary/canary-lab/52_important_components.html",
	"title": "5.2 Important Components",
	"tags": [],
	"description": "",
	"content": " Important components The following are the important components of this lab.\n A GitHub Account. If you don\u0026rsquo;t have one, you can sign up here A fork of the Harness Canary Workshop repo  "
},
{
	"uri": "/030_automated_canary/lab-setup/62_create_harness_app.html",
	"title": "6.2 Create Harness Application",
	"tags": [],
	"description": "",
	"content": " Create a Harness Application Harness Applications are the lifeblood of the CD Abstraction Model. The Harness Application will house everything needed to deploy.\nTo create a Harness Application,\nSetup -\u0026gt; Applications + Add Application\n Name: AWS Canary Lab  Once you hit Submit, a blank Application is there.\n"
},
{
	"uri": "/030_automated_canary/lab-working/82_automated_canary.html",
	"title": "8.2 Automated Canary",
	"tags": [],
	"description": "",
	"content": " Automated Canary Analysis With all of the CD Abstraction pieces out of the way, now it is time to define the Workflow which will power the Canary analysis.\nCreate a new Workflow for the Sample App.\nSetup -\u0026gt; AWS Canary Lab -\u0026gt; Workflows + Add Workflow\n Name: Sample App Canary Workflow Type: Canary Deployment Environment: The EKS Cluster  Once you hit Submit, can add a canary phase under “Deployment Phases” with + Add Phase\nIn the Phase definition, select the Sample App Service and your Infrastructure Definition.\nOnce you hit Submit, your Canary Phase will be empty. This step will be filling out the Prometheus Details.\nIn the Verify section, click + Add Step. Search for “prom” as a function to add.\nSelect Prometheus and then click next. This is where the Prometheus queries will be entered.\n Prometheus Server: EKS Prometheus Metric Name: normal_call Metric Type: Throughput Group Name: custom Query: io_harness_custom_metric_normal_call{kubernetes_pod_name=\u0026ldquo;$hostName\u0026rdquo;}  Add another metric for Errors with + Add\n Metric Name: error_call Metric Type: Error Group Name: custom Query: io_harness_custom_metric_error_call{kubernetes_pod_name=\u0026ldquo;$hostName\u0026rdquo;}  Then set the Analysis Time to 5 mins and Algorithm to Sensitive.\nWhen completed it should look like this.\nClick Submit and you now have Prometheus added to analyze the canary.\nAs a good practice, can automate the removal of the resources if the canary should fail. On the right hand side under Rollback Steps, in the Deploy Phase, + Add Step.\nSearch for Del for the Delete Step.\nSelect Delete.\n Resources: ${k8s.canaryWorkload}  Hit Submit and the final canary should look like this.\nNow you are ready to deploy your application.\n"
},
{
	"uri": "/030_automated_canary.html",
	"title": "Canary Lab",
	"tags": [],
	"description": "",
	"content": " Your First Automated Canary Deployment in EKS Welcome to your first automated canary deployment in EKS/Kubernetes by leveraging the Harness Platform. During the deployment, you will be deploying a stable then unstable version of the Sample Application to demonstrate the virtues of an automated canary deployment.\nPrometheus will be used to automate as the primary source of metric verification for the canary deployment. The lab will walk through installing and configuring Prometheus as well as configuring the Harness pipeline to validate a good deployment.\nIn this section, we\u0026rsquo;ll cover the following topics:\n Automated Canary   Lab Setup   Verification Setup   Automating Canary   "
},
{
	"uri": "/030_automated_canary/lab-setup/63_create_harness_environment.html",
	"title": "6.3 Create Harness Environment",
	"tags": [],
	"description": "",
	"content": " Create a Harness Environment Harness Environments are where you are going to deploy to.\nSetup -\u0026gt; AWS Canary Lab -\u0026gt; Environments + Add Environment\n Name: The EKS Cluster Type: Non-Production  Once Created, define the Infrastructure Definition. You can have multiple clusters here but since the example is only using one, one will be define.\nHit Submit and now you are wired up to deploy to your EKS Cluster.\n"
},
{
	"uri": "/030_automated_canary/lab-working/83_automated_canary_release.html",
	"title": "8.3 Deploy your Canary",
	"tags": [],
	"description": "",
	"content": " Deploy Your Canary It is now time to deploy your application and enjoy safety of an automated canary analysis.\nThe sample application has a stable and unstable version to deploy for demonstration. To toggle between the two, will take advantage of Harness Workflow Variables.\nBack in the Application, add two Workflow Variables.\nSetup -\u0026gt; AWS Canary Lab -\u0026gt; Workflows -\u0026gt; Sample App Canary\nOn the bottom right, click on the “Workflow Variables” pencil icon.\nAdd a pair of variables.\n First: verify_canary / Text / yes Second: metric_verification / Text / Prometheus  Click Save, and your Workflow should look like this.\nThe last step is to define what happens after a successful Canay, which would be to promote. Can click on the + Add Phase after the Canary in Deployment Phase.\n Service: Sample App Infrastructure Definition: My EKS Cluster  Once you hit Submit, your Workflow should look like this and you are ready to deploy.\nNow you are ready to deploy. Click on Deploy on the top right.\n Verify Canary: no Artifact Build: Tag # stable  Click Submit and stable/baseline is headed out the door.\nNow for the fun, you can deploy another version of the application. This can represent a change going into production.\nContinuous Deployment -\u0026gt; Deployments -\u0026gt; Start New Deployment\n Application: AWS Canary Lab Workflow: Sample App Canary Verify Canary: yes Artifact Build: #unstable  Hit Submit and this part will take a few minutes to analyze depending how quickly you redeployed. The learning interval is 5 minutes and the baseline needs to also learn.\nAs expected, the canary analysis is expected to fail because of the application being unstable. Just like that, you now have an automated canary deployment.\nThe rollback was completed without any admin or user intervention.\nHappy Deploying! -The Harness Team\n"
},
{
	"uri": "/020_prerequisites/harness_setup/41_delegate_configuration.html",
	"title": "4.1 Delegate Configuration",
	"tags": [],
	"description": "",
	"content": " Harness Kubernetes Delegate Install The Harness Delegate is a scalable worker node that can be deployed as a linux process on an EC2 instance, an ECS task, or to k8s via a manifest or helm chart. For this lab we will be using a k8s manifest. This is the only Harness software that needs to be installed by the customer. All other Harness services are provided by Harness as a SaaS provider.\n Installing the Harness Kubernetes Delegate which is a worker node in your EKS Cluster is pretty straightforward. You will need kubectl access to the EKS Cluster and should be able to connect using your Cloud9 Console.\nLog into your Harness environment with your browser at the following URL: https://app.harness.io\nSetup -\u0026gt; Harness Delegates then Click on Install Delegate\n Name: “eks-delegate”  Can download to your local machine once or if using a remote machine, can copy the cURL command in the “Copy Download Link” link.\nNext will need to expand the tar.gz that was downloaded. If using a remote machine, can run the command:\ntar -xvf harness-delegate-kubernetes.tar.gz Inside the expanded tar folder, there is a README.txt which has several useful commands. Run the following command against the yaml file in the folder:\nkubectl apply -f harness-delegate.yaml After a few moments, the Delegate will be available via the Harness UI.\nThe Implicit Selectors in the image below are automatically provided based on the deployment of the Delegate and can be used for scoping of the Delegate to specific resources, applications, clusters, etc.. Additionally one can add Custom Selectors for the same purpose.\n "
},
{
	"uri": "/020_prerequisites/harness_setup/42_eks_connect.html",
	"title": "4.2 Connecting to EKS",
	"tags": [],
	"description": "",
	"content": " Adding EKS Cluster to Harness Adding the EKS Cluster to Harness is simple. To create a new Cloud Provider which represents the EKS Cluster,\nSetup -\u0026gt; Cloud Providers + Add Cloud Provider -\u0026gt; Kubernetes Cluster\n Name: My EKS Cluster Cluster Details: Inherit from Selected Delegate Delegate: eks-delegate  Once you click Next and Submit, your EKS Cluster is wired to Harness.\n"
},
{
	"uri": "/030_automated_canary/verification_setup/71_k8s_metrics_server.html",
	"title": "7.1 Metrics Server Install",
	"tags": [],
	"description": "",
	"content": " Kubernetes Metrics Server Installing the Metrics Server can be done in one kubectl command.\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml "
},
{
	"uri": "/030_automated_canary/verification_setup/72_prometheus_install.html",
	"title": "7.2 Prometheus Installation",
	"tags": [],
	"description": "",
	"content": " Prometheus Installation Harness can facilitate the installation of Prometheus. For this workshop, the Prometheus deployables have been configured to be accessible by the workloads in the EKS Cluster in the Git Repository.\nSetup -\u0026gt; AWS Canary Lab -\u0026gt; Services + Add Service\n Name: Install Prometheus Deployment Type: Kubernetes  Once you hit Submit, click on three ellipses on the right hand side to Link Remote Manifests.\nEnter the following information:\n Manifest Format: Kubernetes Specs Source Repository: AWS Workshop Branch: master File/Folder: prometheus  Click Submit and you are ready to deploy Prometheus.\n"
},
{
	"uri": "/030_automated_canary/verification_setup/73_prometheus_deployment.html",
	"title": "7.3 Prometheus Deployment",
	"tags": [],
	"description": "",
	"content": " Prometheus Deployment To deploy something in Harness, defining a Harness Workflow will define the steps on the deployment will be achieved.\nSetup-\u0026gt; AWS Canary Lab -\u0026gt; Workflows + Add Workflow\n Name: Deploy Prometheus Workflow Type: Rolling Deployment Environment: The EKS Cluster Service: Install Prometheus Infrastructure Definition: My EKS Cluster  Click Submit and you are ready to deploy.\nIn the upper right hand corner of the Workflow, click Deploy.\nHit Submit and Prometheus will be deployed.\n"
},
{
	"uri": "/030_automated_canary/verification_setup/74_prometheus_connect.html",
	"title": "7.4 Connecting Prometheus",
	"tags": [],
	"description": "",
	"content": " Connecting Harness to Prometheus In order to connect Harness to Prometheus, you need the accessible URL endpoint. To grab the HTTP accessible address, run the following command.\nkubectl describe service prometheus-service Copy down the LoadBalancer Ingress address from the output of the kubectl command:\na8241cbf8317f4c1ab5507fbce9d576c-671821569.us-east-2.elb.amazonaws.com\nYou can navigate to the Prometheus UI to validate installation by adding port 8080 for example: https://a8241cbf8317f4c1ab5507fbce9d576c-671821569.us-east-2.elb.amazonaws.com:8080\nAdd Prometheus as a Verification Provider To wire Prometheus to Harness, setup as a Verification Provider.\nSetup -\u0026gt; Connectors -\u0026gt; Verification Providers + Add Verification Provider -\u0026gt; Prometheus\n Display Name: EKS Prometheus URL: http://_elb_address:8080/ for example: http://a8241cbf8317f4c1ab5507fbce9d576c-671821569.us-east-2.elb.amazonaws.com:8080/  Click Submit and Prometheus will be wired to Harness.\n"
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]